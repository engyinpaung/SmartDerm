from simple_pid import PID
import time
import matplotlib.pyplot as plt

class pressure: 
    def__init__(self): 
#Insert Bluetooth module retrieving data from sensors (From Vinith) 
    self.pressure_mat = #pressure matrix 

#Insert Raspberry Pi initiator 

#Initialize constant and gain values
Kp = 10
Ki = 10
Kd = 10
time_delta = start.time() + 60 * 15 #1 hour spent in each orientation 
pid_setpoint = [-30, 30]

#Define Smartderm Class
class smartderm:
    def __init__(self):
        self.angle = 0
    def update(self, control,dt):
        if control_output > 0: #Why greater than 0? Find out 
            self.angle += 0.5*dt #Revise this with Smartderm team
            #Insert relay switch code 
        else:
            self.angle -= 30*dt
        return self.angle
class pid_loop: 
    def __init__(self, pid_setpoint): 
        self.pid = PID(Kp, Ki, Kd)
        self.pid.setpoint = pid_setpoint 
        self.pid.output_limits = (-35, 35) 
    def control_loop(self):    
        current_time = time.time() 
        dt = current_time - last_time 
        control_output = self.pid(angle) 
        angle = sys.update(control_output,dt) 
    def pid_plot():     
        t += [current_time - start_time] #create list for time variable
        omega += [angle] #create list for temperature variable
        setpoint_tuple += [pid.setpoint] #create setpoint constant
        last_time = current_time
        # Visualization of Output Results
        plt.plot(t, setpoint, label='target')
        plt.plot(t, omega, label='PID')
        plt.xlabel('time')
        plt.ylabel('angle')
        plt.legend()
        plt.show()
    def init_pressure(self):
        #Obtain pressure matrix and find the gradient of matrix
        #If gradient >> 0, interrupt control loop sequence and modulate pressure (patient returns to supine position and then turn opposite way) 
        #If gradient ~= 0, pass 
if __name__ == '__main__':
    sys = smartderm()
    angle = sys.angle
    start_time = time.time()
    last_time = start_time
    setpoint_tuple, t, omega = [], [], []
    while start_time - current_time < time_delta: #runs for 1 hour
        pid_setpoint = setpoint[1]
        sys_pid = pid_loop(pid_setpoint)
    else:
    
   
