P=randi([0, 25],12,4); %Creates random 12x4 Matrix 
dPdx = []; %Pressure Deriviative for x
dPdy = []; %Pressure Derivative for y 
%%% Calculate dP/dx %%% 
for r=1:1:12 %Looping through rows 
    for c=1:1:4 %Looping through columns 
        if c ~= 4 
            x = fin_diffx(P(r,c),P(r,c+1),1);
            dPdx(end+1)=x;
        else 
            x = fin_diffx(P(r,c),0,1);
            dPdx(end+1)=x;
        end
    end
end
%%% Calculate dP/dy %%% 
for c=1:1:4 %Looping through columns 
    for r=1:1:12 %Looping through rows 
        if r ~= 12
            y = fin_diffy(P(r,c),P(r+1,c),1);
            dPdy(end+1)=y;
        else
            y = fin_diffy(P(r,c),0,1);
            dPdy(end+1)=y;
        end
    end
end
%%%Visualizing resulting Pressure Matrix%%%
dPdx
dPdy
%%% Calculate averages of the Pressure Matrix%%%
dPdx_avg=mean(dPdx);
dPdy_avg=mean(dPdy);
dP_avg=sqrt(dPdx_avg^2+dPdy_avg^2) %%% Average pressure gradient value
dPdx_max=max(dPdx);
dPdy_max=max(dPdy);
dP_max=sqrt(dPdx_max^2+dPdy_max^2) %%% Max pressure gradient value

%%% Define functions %%%
function p_dx = fin_diffx(x,y,dx)
    p_dx = (y-x)*1/dx;
end
function p_dy = fin_diffy(x,y,dy)
    p_dy = (y-x)*1/dy; 
end
